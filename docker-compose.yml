version: "3.9"
services:
  backend:
    build: .
    container_name: firefly-backend
    ports:
      - "8000:8000"
    environment:
      - LOG_LEVEL=INFO
      - DEFAULT_TIMEOUT=5
      - MAX_TIMEOUT=30
    networks:
      - firefly
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request, sys, socket; socket.setdefaulttimeout(2); r=urllib.request.urlopen('http://127.0.0.1:8000/api/readyz'); sys.exit(0 if r.status==200 else 1)"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 15s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true

  # Optional Linux-only variant: backend with host networking for multicast
  backend_hostnet:
    build: .
    container_name: firefly-backend-host
    network_mode: host
    environment:
      - LOG_LEVEL=INFO
      - DEFAULT_TIMEOUT=5
      - MAX_TIMEOUT=30
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request, sys, socket; socket.setdefaulttimeout(2); r=urllib.request.urlopen('http://127.0.0.1:8000/api/readyz'); sys.exit(0 if r.status==200 else 1)"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 15s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    profiles: ["hostnet"]
  frontend:
    build:
      context: ./firefly
      args:
        USE_NPM_CI: "false"
    container_name: firefly-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    depends_on:
      - backend
    networks:
      - firefly
    healthcheck:
      test: ["CMD", "sh", "-c", "wget -qO- http://127.0.0.1:3000 >/dev/null 2>&1 || exit 1"]
      interval: 30s
      timeout: 3s
      retries: 5
      start_period: 15s
networks:
  firefly: {}